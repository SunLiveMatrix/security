import * as React from "react";
import { AbstractPureComponent } from "../../common";
import type { OverlayToasterProps } from "./overlayToasterProps";
import { type ToastProps } from "./toast";
import type { Toaster, ToastOptions } from "./toaster";
export interface OverlayToasterState {
    toasts: ToastOptions[];
}
export interface OverlayToasterCreateOptions {
    /**
     * A new DOM element will be created to render the OverlayToaster component
     * and appended to this container.
     *
     * @default document.body
     */
    container?: HTMLElement;
    /**
     * A function to render the OverlayToaster React component onto a newly
     * created DOM element.
     *
     * Defaults to `ReactDOM.render`. A future version of Blueprint will default
     * to using React 18's createRoot API, but it's possible to configure this
     * function to use createRoot on earlier Blueprint versions.
     */
    domRenderer?: (toaster: React.ReactElement<OverlayToasterProps>, containerElement: HTMLElement) => void;
}
/**
 * OverlayToaster component.
 *
 * @see https://blueprintjs.com/docs/#core/components/toast
 */
export declare class OverlayToaster extends AbstractPureComponent<OverlayToasterProps, OverlayToasterState> implements Toaster {
    static displayName: string;
    static defaultProps: OverlayToasterProps;
    /**
     * Create a new `Toaster` instance that can be shared around your application.
     * The `Toaster` will be rendered into a new element appended to the given container.
     */
    static create(props?: OverlayToasterProps, container?: HTMLElement): Toaster;
    /**
     * Similar to {@link OverlayToaster.create}, but returns a Promise to a
     * Toaster instance after it's rendered and mounted to the DOM.
     *
     * This API will replace the synchronous {@link OverlayToaster.create} in a
     * future major version of Blueprint to reflect React 18+'s new asynchronous
     * rendering API.
     */
    static createAsync(props?: OverlayToasterProps, options?: OverlayToasterCreateOptions): Promise<Toaster>;
    state: OverlayToasterState;
    private toastId;
    show(props: ToastProps, key?: string): string;
    dismiss(key: string, timeoutExpired?: boolean): void;
    clear(): void;
    getToasts(): ToastOptions[];
    render(): React.JSX.Element;
    protected validateProps({ maxToasts }: OverlayToasterProps): void;
    private isNewToastKey;
    private dismissIfAtLimit;
    private renderToast;
    private createToastOptions;
    private getPositionClasses;
    private getDismissHandler;
    private handleClose;
}
